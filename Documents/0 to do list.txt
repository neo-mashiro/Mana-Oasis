测一下cooldown的功能。
复习一遍Test-Oasis关于C#的语法
看Russell的视频，简略过一遍，马上Moodle就关了。

1月份开始，开学左右，就开始在glassdoor上投简历，找ubisoft和unity这种实习的机会。
记得发邮件给ayoub让他介绍下有什么好的montreal的unity的岗位，他人脉广。ayoub还是非常赞的。。。。。
不要去考Unity的资格证书，不值得的，专心加速把自己的游戏做出来。

用圆柱体把游泳爬梯子这些功能都测通
crouch的时候，相机的followPoint也要跟着下降才行
water用trigger collider没问题，但是ladder呢，用trigger的话就可以直接穿过去了
需要补一段从swim回到default的逻辑。。。

看lovelive sunshine

把root motion用Shirley做进去，先不用管头部转动的动画（FPS下应该头部随着相机转动的，水平和垂直都可以）

refactor玩家和相机的控制脚本
refactor planet和teleporter的脚本

处理physicsMover的问题，当站在旋转的平台上时，人物要随着平台一起旋转和移动，TPS时camera不动（上帝视角），FPS时camera也要跟着动，完成后测一下和普通的kinematic的刚体的交互，再测一下和physics刚体的交互（在motor上找到rigidbody interaction type的设置）。这部分目前可能解决不了，KCC只支持站在physicsMover上的互动，对于一般的没加PhysicsMover的刚体比如我的car，搞不定，等DOTS CC发布再说吧，先就单独用carController。
干脆就这样，玩家上车后，禁用KCC，切换成carController就行了，然后把玩家做成car的child，下车了再切回KCC。

测一下改好的脚本能否控制AI
交互没问题了，把carController素材导进来，配合车辆的素材，hook一下驾驶的FPS和TPS（KCC很难处理非physicMover的dynamic刚体，可能要等DOTS CC发布了才行）

利用cinemachine和timeline制作并测试一下玩家的cutscene，利用default到Charging state的转换。

开始搞玩家的RPG战斗系统了！！！！！！先学习视频，确定好架构和设计！！！！
https://www.youtube.com/watch?v=FGVkio4bnPQ  // 工厂模式
https://www.youtube.com/watch?v=nqAHJmpWLBg  // 基于reflection的比较高级的C# Architecture from Jason
https://www.youtube.com/watch?v=G1bd75R10m4  // State Machine
然后，开始研究设计怎么和序列化搭配！！！！把SAVE LOAD的功能和存储数据的方式（数据库或简单文本等等）实现出来！！！！
然后，开始搞仓库系统！！！试试看scriptable object。
学习ScriptableObject Tutorial and Template:
https://www.raywenderlich.com/2826197-scriptableobject-tutorial-getting-started
https://www.youtube.com/watch?v=HQNl3Ff2Lpo
https://www.youtube.com/watch?v=SmnjRCa_iO4&t=71s
https://www.youtube.com/watch?v=LdlKiKC6mr4
https://learn.unity.com/tutorial/introduction-to-scriptable-objects#5cf187b7edbc2a31a3b9b123

成就系统：
Observer pattern实现游戏内的成就system，当玩家完成一定数量的kill或什么的，给予manacoin的奖励什么的，或者解锁某些功能，通过UI提示来反应。
https://www.youtube.com/watch?v=Yy7Dt2usGy0

网络部分太麻烦了，以后再说：
研究一下kinematicCharacterController中的network部分，看一下如何手动控制simulation和setTick，处理网络的延迟模拟

[CRITICAL CHANGE]
1. 现阶段先凑合用老的Input Manager，因为input都比较简单。等基本框架搭起来以后，切换到新的Input System Package，脚本代码再做相应的调整。
不要浪费时间去学习老的Input Manager体系，马上就被淘汰了，新的Input包很牛逼，功能非常强大，可以各种bind事件，根据场景切换功能什么的，是未来的大趋势。
2. Unity的2020 LTS版本出来以后，migrate到新版本的Unity，届时，Unity会支持C# 8.0的新语法和功能，包括nullable reference类型以及default interface implementations之类的。当Interface可以支持default代码实现的时候，传统的OOP继承就基本上没有用武之地了。

继续刷Jasper的object management教程，render光照等等

学习Unity UI 1.0.0 （UGUI）

研究学习一下DOTween Pro的用法，这个是用来做animation的，主要功能是interpolate一个个的keyframe.

C++玩转OpenGL，研究下Cherno的视频
用C++玩OpenGL，最好做个小项目，学习Cherno视频。
