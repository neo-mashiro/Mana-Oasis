1月份开始，开学左右，就开始在glassdoor上投简历，找ubisoft和unity这种实习的机会。
记得发邮件给ayoub让他介绍下有什么好的montreal的unity的岗位，他人脉广。ayoub还是非常赞的。。。。。
最后找工作展示portfolio的时候，可能没法做WebGL的build，那就录一堆短视频，把mana项目网站搭起来，publish到网页上。网页上是可以嵌入小视频的，画质非常高，不像GIF一样受到网站帧数的限制什么的，可以参考下这个例子：https://roystan.net/articles/camera-shake.html。Google可以搜到很多专门host Unity项目的服务器，可以保存游戏数据，host网页什么的，很便宜一个月几刀，搜一下。
------------------------------------------------------------------------------------------
REMEMBER：mana oasis终归只是一个个人爱好练习项目，是个人收藏项目而不是商业游戏，可以免费发布到steam但永远不可能是商业级的AAA。

【找工作需要展示的重点】
0. controller + camera + basic动画系统 + inverse kinematics。
1. combat动画系统 + 攻击特效 + enemy AI。
2. 基于scriptableObject以及observer pattern的player status管理，HP mana之类的。
3. UI系统（先做inventory，然后是切换武器的UI dial）
4. save load保存数据。
5. 有额外时间了再考虑render这块，包括光照，texture map，shader等等
------------------------------------------------------------------------------------------
sit_00-05
liedown_00-03
salute_01
pose_02
greet_01-04

guard_20  用来做防御阵施法动画
down_22-23

飞行时加上翅膀。这个先不做，等把玩家的character替换成哥特萝莉了再加上。翅膀必须是humanoid avatar的一部分，并且被包含在飞行的animation clip中。平时翅膀处于disable状态，没有collider。当动画进入flystate的时候（而不是kcc进入air mode），再通过OnEnable和OnDisable进行开关，同时开启collider。
为了模拟翅膀从后背逐渐长出来的效果，不要直接设置enabled的flag，而是start一个coroutine，从翅根的部位把mesh的透明度一点点设置为1。同时，翅膀自带一个trail renderer，最好是用particle做的，翅膀完全伸展开了以后，开启翅膀go上的trail renderer的开关（脚本控制emitting为true or false）。

VRoid做自己的哥特萝莉，白丝，黑色连衣裙，奈叶式法杖，名字叫？？？。retarget Satomi的动画到她身上。
或者把shirley放到blender里改一下？学习blender的基础
做成texture可以换装的，runtime替换skinnedMeshRenderer。
==============================================================================================================
为什么slope太逗的话，会从move进入airborne？？？难debug，以后再看。实在不行就把太陡的slope边沿前面加个box collider。

walk up/down stairs，没有animation，有了animation再补。楼梯上不准run只能walk，给每个楼梯设置一个trigger collider，在KCC里处理。
crouch的动画play的时候，脚会陷入地面，要么修改animation，要么用IK解决。

做IK！！！！！参考animancer的例子和买的素材。==============================================================
人物的脚步声，jump声，各种动画音效加上。用animancer的event实现。
----------------------------------------------------
到此恭喜你，已经大功告成了，胜利在眼前。base layer全部搞定。

combat layer，做上半身的简单武器动画，melee attack有三个combo（全连需要root motion，在KCC里已经写好了，目前注释掉了），没有block动作。
range attack就是几个简单施法动作，加上crosshair（固定距离）以后，以crosshair为target做aim ik。有防御阵魔法替代block。
(参考Animancer的layer example和IK example，可能还要看下event的example)

aim IK以及让手臂自然的去follow抓住镰刀，用animation rigging在editor里设置好，再配合OnAnimatorIK()去更新处理。
foot IK参考那个素材，重写素材，自己用OnAnimatorIK()处理。
Shirley，平时走路不带翅膀和镰刀，进入飞行状态的时候，动画展开翅膀并启动镰刀，镰刀相当于是飞行的扫帚。如果需要战斗，必须先按键，把镰刀拿出来，分两种模式，近战把镰刀动画变大，可以挥舞造成物理伤害，但无法使用魔法，也没有准星。远程攻击的话要把镰刀动画变成手可以握住的魔杖大小，粉水晶的部位用粒子系统或者shader graph做个动画特效，用于蓄力施法的，但远程状态下无法物理攻击。
飞行或游泳状态下如果需要战斗的话，只利用翅膀进行飞行，而镰刀用于战斗。
近战模式下，TPS的rotation调成和FPS一样，人物随着鼠标的转动而转动，不能朝向相机往后跑，只能后退，所以要有个后退的动画。
远程模式下，做个准星，准星用UI-gameobject模式实现，并设置为上半身IK的target。同时，左右键改成左右的strafe移动，而人物不转向。
--------------------------------------------------------------------------------------------------------------------
【XXX】继续刷CatlikeCoding的教程。
【XXX】开始补Cherno的C++视频，CG，OpenGL

-------------------------------------------------------
【增加feature】当站在旋转的平台上时，人物要随着平台一起旋转和移动，FPS时camera带动人物旋转，TPS时camera不旋转只follow。利用新写的那个MovingPlatform的脚本。测试一下motor上的rigidbody interaction type的选项。----暂时取消，等新的DOTS Strider CC出来了重写，新的CC非常强大。
【增加feature】导入car controller，实现人物开车的功能，camera要根据车子的晃动而shake。
【增加feature】用KCC控制AI，参考example的AI脚本。----暂时取消，等新的DOTS Strider CC

-------------------------------------------------------
【fix】planet目前的逻辑是通过teleporter的进入而改变gravity的，把这个扩展一下，当玩家靠近星球一定距离的时候，OnTriggerEnter就改变gravity。
【增加feature】搭第一版简易地图，导入HDRP包和相关素材，搭建旋转的planet(用planet脚本)以及teleporter。
------------------------------------------------------------------------------------------
【开发UI系统】
学习Unity UI 1.0.0 （UGUI），学习购买的MMO UI 11。
最新的官方【UI Toolkit】还在开发preview阶段，暂时观望。近几年还是以UGUI为重心。

【fix】refine loading screen的loading bar，自己写脚本替代掉UI自带的那个很丑的slider，用MMO UI 11包里现成的progress bar素材。
【增加feature】切到UI界面，或者弹出UI菜单的时候，要启用鼠标cursor。Cursor.visible = true; Cursor.lockState = CursorLockMode.Confined;
【增加feature】飞行状态时，做个meter的radial表盘F3显示高度和速度，没找到素材，等学了Photoshop再看，表针划过的区域用shader做成半透明的彩色状态。

------------------------------------------------------------------------------------------
【开发战斗系统（动画和IK已经做完了）】
先学习视频，确定好架构和设计！！！！
https://www.youtube.com/watch?v=FGVkio4bnPQ  // 工厂模式
https://www.youtube.com/watch?v=nqAHJmpWLBg  // 基于reflection的比较高级的C# Architecture from Jason
https://www.youtube.com/watch?v=G1bd75R10m4  // State Machine
这个SO的unite talk非常专业，花一周时间研究一下怎么做architecture，用SO替代掉传统的singleton和unity event。
https://www.youtube.com/watch?v=raQ3iHhE_Kk
melee combat用第三人称，ranged combat用第一人称。就算是TPS视角，也要在屏幕中间加一个很淡的crosshair（当鼠标移到攻击对象身上时，动态高亮）
然后，开始研究设计怎么和序列化搭配！！！！把SAVE LOAD的功能和存储数据的方式（数据库或简单文本等等）实现出来！！！！
然后，开始搞仓库系统！！！试试看scriptable object。
学习ScriptableObject Tutorial and Template:
https://www.raywenderlich.com/2826197-scriptableobject-tutorial-getting-started
https://www.youtube.com/watch?v=HQNl3Ff2Lpo
https://www.youtube.com/watch?v=SmnjRCa_iO4&t=71s
https://www.youtube.com/watch?v=LdlKiKC6mr4
https://learn.unity.com/tutorial/introduction-to-scriptable-objects#5cf187b7edbc2a31a3b9b123
等玩家的系统做好了，修改controller，让玩家在free模式中飞行的时候每秒消耗一点魔法。一旦mana耗尽，就自动切回default状态，可能会摔死。
在editor里，玩家的hp mana这些属性，用naughtyAttributes的ProgressBar做，看上去更直观。

【增加feature】战斗时可以按Q，弹出一个radial的圆形UI菜单，供玩家切换武器。

【save load系统】json序列化
https://www.youtube.com/watch?v=4h2CvULKqic


【升级到2020 LTS版本，春季发布】
【fix】把标注了【C# 8.0 feature not yet supported】的注释全部拿掉，替换之前的非switch expression语法版本。



成就系统：
Observer pattern实现游戏内的成就system，当玩家完成一定数量的kill或什么的，给予manacoin的奖励什么的，或者解锁某些功能，通过UI提示来反应。
https://www.youtube.com/watch?v=Yy7Dt2usGy0




----------------------------------------------遥遥无期----------------------------------------------
【增加feature】学习新的Input System包，创建InputAction asset，然后用新的input系统把动画和KCC脚本以及相机整合在一起。最好等DOTS Strider出来再说。

【Strider发布】把现有的KCC换成新的DOTS Strider controller，并把default/auto/climb/swim/air几种模式的架构改掉。现有的controller是一个差不多1000行代码的单个脚本，所有的controlMode都集中在一起，用一堆switch-case切换，虽然不影响performance，但是design非常bad，可读性较差，且改起来没那么方便。有了Strider以后，把每个controlMode放到一个单独的脚本里，每个controlMode都是有限状态机里的一个state，然后有一个“brain”脚本去管理所有的state以及state之间的transition。这样的话我的character controller就分成多个脚本，可读性很好，每次改只要改一个controlMode所对应的state就可以了。
【DOTS发布】 把整个项目migrate到DOTS版本，摒弃传统的OOP和monobehavior，采用ECS的data/code隔离的方式refactor代码。
现阶段Burst编译器和ECS包还有很多bug，以及非常多未完成的feature。

【未来扩展】用脚本控制Shirley的表情，比如按F2时从默认逐渐blend到生气，https://docs.unity3d.com/Manual/BlendShapes.html
【未来扩展】用animation rigging，参考Brackeys视频加上headAim rig，使得FPS的头部随着相机转动，水平正负100度之内，垂直正负90度。TPS不转动。
【未来扩展】实现动画的IK，以及人物换装，以及Target Matching【https://docs.unity3d.com/Manual/TargetMatching.html】这几个功能比较难，很大，目前阶段不好学，太占用时间了，而且只是微调的精细小功能，不值得现在花太多时间。

网络部分太麻烦了，以后再说：
研究一下kinematicCharacterController中的network部分，看一下如何手动控制simulation和setTick，处理网络的延迟模拟

addressable太难了，先跳过吧，估计要花两周时间啃下来。。。下面是一些教程链接。重点过一遍github那个仓库的sample，理解代码，然后再看视频。
https://github.com/Unity-Technologies/Addressables-Sample/tree/master/Basic
https://www.youtube.com/watch?v=6IlIA2eLk0I
https://www.youtube.com/watch?v=U8-yh5nC1Mg
https://www.youtube.com/watch?v=uNpBS0LPhaU&t=432s
https://gamedev.stackexchange.com/questions/169977/what-am-i-suppose-to-use-instead-of-unity-resources-if-i-have-to-load-and-unload

利用cinemachine和timeline制作并测试一下玩家的cutscene，利用default到Charging state的转换。

看Cherno的视频学习一下Hazel引擎，了解OpenGL的基本原理就好，想自己做是不可能的。
